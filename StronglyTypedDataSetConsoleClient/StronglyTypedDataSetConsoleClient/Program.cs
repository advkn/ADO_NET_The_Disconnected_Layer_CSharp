using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using AutoLotDAL;
using AutoLotDAL.AutoLotDataSetTableAdapters;   //Necessary for the autogenerated DataSet designer code.

namespace StronglyTypedDataSetConsoleClient
{

    /*This simple console app demonstates the use of code created by the DataSet designer
     which gives you a strongly typed DataSet, DataTable, DataRow, and data adapter classes
     created through a drag and drop interface.  See the AutoLotDAL Version Three project folder
     for an understanding of *.dll this program references.
     
     No connection string is needed because that info is now part of the strongly typed object model.
     */

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("***** Using Strongly Typed DataSets *****\n");

            AutoLotDataSet.InventoryDataTable table = new AutoLotDataSet.InventoryDataTable();

            InventoryTableAdapter dAdapt = new InventoryTableAdapter();

            //Add rows, and update
            //AddRecords(table, dAdapt);
            //table.Clear();

            //Fill the table
            dAdapt.Fill(table);
            PrintInventory(table);
            //RemoveRecords(table,dAdapt);
            CallStoredProc();
            Console.ReadLine();
        }

        static void PrintInventory(AutoLotDataSet.InventoryDataTable dt)
        {
            //Print out the column names
            for (int curCol = 0; curCol < dt.Columns.Count; curCol++)
            {
                Console.Write(dt.Columns[curCol].ColumnName + "\t");
            }
            Console.WriteLine("\n------------------------------------");

            //Print the data
            for (int curRow = 0; curRow < dt.Rows.Count; curRow++)
            {
                for (int curCol = 0; curCol < dt.Columns.Count; curCol++)
                {
                    Console.Write(dt.Rows[curRow][curCol].ToString() + "\t");
                }
                Console.WriteLine();
            }
        }

        //Inserting data using the generated code from our AutoConDAL library
        public static void AddRecords(AutoLotDataSet.InventoryDataTable tbl, InventoryTableAdapter dAdapt)
        {
            //Get a new strongly typed row from the table
            AutoLotDataSet.InventoryRow newRow = tbl.NewInventoryRow();

            //Fill the row with some sample data
            newRow.CarID = 777;
            newRow.Color = "Blue";
            newRow.Make = "Lexus";
            newRow.PetName = "Spordo";

            //Insert the new row
            tbl.AddInventoryRow(newRow);

            //Add another row, this time using the overloaded Add method
            tbl.AddInventoryRow(995, "Porsche", "Black", "OutRun");

            //update the table
            dAdapt.Update(tbl);
        }

        //Deleting data with generated code.
        private static void RemoveRecords(AutoLotDataSet.InventoryDataTable tbl, InventoryTableAdapter dAdapt)
        {
            int carID;
            Console.WriteLine("Please enter the ID of the Car you want to delete: ");

            carID = int.Parse(Console.ReadLine());
            try
            {
                AutoLotDataSet.InventoryRow rowToDelete = tbl.FindByCarID(carID);
                dAdapt.Delete(rowToDelete.CarID, rowToDelete.Make, rowToDelete.Color, rowToDelete.PetName);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return;
            }
        }

        //Invoking a stored procedure from generated code
        public static void CallStoredProc()
        {

            QueriesTableAdapter q = new QueriesTableAdapter();
            Console.Write("Enter ID of car to look up: ");
            string carID = Console.ReadLine();
            string carName = "";
            q.GetPetName(int.Parse(carID), ref carName);
            Console.WriteLine("CarID {0} has the name of {1}", carID, carName);
        }

    }
}
